/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Scene API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const sceneObjectControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/scene-objects`,options
    );
  }


export const getSceneObjectControllerFindAllQueryKey = () => {
    return [`/scene-objects`] as const;
    }

    
export const getSceneObjectControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof sceneObjectControllerFindAll>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSceneObjectControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sceneObjectControllerFindAll>>> = ({ signal }) => sceneObjectControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type SceneObjectControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof sceneObjectControllerFindAll>>>
export type SceneObjectControllerFindAllQueryError = AxiosError<unknown>



export function useSceneObjectControllerFindAll<TData = Awaited<ReturnType<typeof sceneObjectControllerFindAll>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSceneObjectControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const sceneObjectControllerCreate = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.post(
      `/scene-objects`,undefined,options
    );
  }



export const getSceneObjectControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerCreate>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerCreate>>, TError,void, TContext> => {

const mutationKey = ['sceneObjectControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sceneObjectControllerCreate>>, void> = () => {
          

          return  sceneObjectControllerCreate(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SceneObjectControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sceneObjectControllerCreate>>>
    
    export type SceneObjectControllerCreateMutationError = AxiosError<unknown>

    export const useSceneObjectControllerCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerCreate>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof sceneObjectControllerCreate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSceneObjectControllerCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const sceneObjectControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/scene-objects/${id}`,options
    );
  }


export const getSceneObjectControllerFindOneQueryKey = (id: string,) => {
    return [`/scene-objects/${id}`] as const;
    }

    
export const getSceneObjectControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof sceneObjectControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSceneObjectControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sceneObjectControllerFindOne>>> = ({ signal }) => sceneObjectControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type SceneObjectControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof sceneObjectControllerFindOne>>>
export type SceneObjectControllerFindOneQueryError = AxiosError<unknown>



export function useSceneObjectControllerFindOne<TData = Awaited<ReturnType<typeof sceneObjectControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sceneObjectControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSceneObjectControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const sceneObjectControllerUpdate = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.put(
      `/scene-objects/${id}`,undefined,options
    );
  }



export const getSceneObjectControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerUpdate>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerUpdate>>, TError,{id: string}, TContext> => {

const mutationKey = ['sceneObjectControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sceneObjectControllerUpdate>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  sceneObjectControllerUpdate(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SceneObjectControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof sceneObjectControllerUpdate>>>
    
    export type SceneObjectControllerUpdateMutationError = AxiosError<unknown>

    export const useSceneObjectControllerUpdate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerUpdate>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof sceneObjectControllerUpdate>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSceneObjectControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const sceneObjectControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/scene-objects/${id}`,options
    );
  }



export const getSceneObjectControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['sceneObjectControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sceneObjectControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  sceneObjectControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SceneObjectControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof sceneObjectControllerRemove>>>
    
    export type SceneObjectControllerRemoveMutationError = AxiosError<unknown>

    export const useSceneObjectControllerRemove = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sceneObjectControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof sceneObjectControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSceneObjectControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    