/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Scene API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const appControllerGetData = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/`,options
    );
  }


export const getAppControllerGetDataQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetDataQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetData>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetData>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetData>>> = ({ signal }) => appControllerGetData({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetData>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetDataQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetData>>>
export type AppControllerGetDataQueryError = AxiosError<unknown>



export function useAppControllerGetData<TData = Awaited<ReturnType<typeof appControllerGetData>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetData>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetDataQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



